#include <iostream>
#include <cstdlib>
#include <ctime>

using namespace std;

const int INITIAL_HEALTH = 100;
const int BOSS_HEALTH = 50;

class Game {
private:
    int health;
    int bossHealth;
    bool hasGun;
    bool hasMapPiece1;
    bool hasMapPiece2;

    // Returns random damage between min and max
    int getRandomDamage(int min, int max) {
        return rand() % (max - min + 1) + min;
    }

    // Handles the boss fight in Cave 3
    void bossFight() {
        cout << "You enter the third Cave. Boss fight!" << endl;

        // If the player has a gun, they can fight the boss
        if (hasGun) {
            while (bossHealth > 0 && health > 0) {
                int hit = rand() % 10;  // 90% chance to hit
                if (hit < 9) {
                    bossHealth -= 3;
                    cout << "You hit the boss! Boss health: " << bossHealth << endl;
                } else {
                    cout << "You missed!" << endl;
                }

                // The boss attacks if it's still alive
                if (bossHealth > 0) {
                    int damage = getRandomDamage(2, 4);
                    health -= damage;
                    cout << "The boss hit you! Your health: " << health << endl;
                }
            }

            // If the player defeated the boss
            if (health > 0) {
                cout << "You defeated the boss!" << endl;
                hasMapPiece2 = true;
                if (hasMapPiece1) {
                    cout << "You win!" << endl;
                } else {
                    cout << "You found the second map piece, Good Job!." << endl;
                }
            }
        } else {
            // If the player doesn't have a gun, they lose
            cout << "You don't have a gun! The boss kills you!!." << endl;
            health = 0;
        }
    }

    // Handles the events in Cave 1
    void cave1() {
        cout << "You enter Cave 1." << endl;
        int damage = getRandomDamage(1, 3);
        health -= damage;
        cout << "You took " << damage << " damage. Health: " << health << endl;

        if (health > 0) {
            hasMapPiece1 = true;
            cout << "You found the first map piece." << endl;
        }
    }

    // Handles the events in Cave 2
    void cave2() {
        cout << "You enter Cave 2." << endl;
        int item = rand() % 2;  // Random item: health or weapon
        if (item == 0) {
            health = INITIAL_HEALTH;
            cout << "You found a health item. Health restored to " << health << "." << endl;
        } else {
            hasGun = true;
            cout << "You found a gun." << endl;
        }

        // Player takes random damage from Cave 2 hazards
        int damage = getRandomDamage(1, 5);
        health -= damage;
        cout << "You took " << damage << " damage. Health: " << health << endl;
    }

    // The lobby where the player chooses a cave
    void lobby() {
        cout << "Choose a cave (1, 2, 3) or return to lobby (4): ";
        int choice;
        cin >> choice;

        switch (choice) {
            case 1: cave1(); break;  // Go to Cave 1
            case 2: cave2(); break;  // Go to Cave 2
            case 3: cave3(); break;  // Go to Cave 3 (Boss fight)
            case 4: cout << "Returning to lobby.\n"; break;  // Stay in lobby
            default: cout << "Invalid choice. Try again.\n"; break;  // Handle invalid input
        }
    }

public:
    // Constructor to initialize the game state
    Game() : health(INITIAL_HEALTH), bossHealth(BOSS_HEALTH), hasGun(false), hasMapPiece1(false), hasMapPiece2(false) {
        srand(time(0));  // Seed the random number generator
    }

    // Main game loop
    void start() {
        while (health > 0 && !hasMapPiece2) {  // Continue until the player wins or dies
            lobby();  // Show lobby where the player chooses a cave
        }

        if (health <= 0) {
            cout << "Game Over! You have been defeated." << endl;
        } else {
            cout << "Congratulations! You won!!" << endl;
        }
    }

    // Handles Cave 3 logic (boss fight)
    void cave3() {
        if (health <= 0) {
            cout << "You can't proceed, you're dead!" << endl;
            return;
        }
        bossFight();  // Start the boss fight
    }
};

int main() {
    Game game;
    game.start();  // Start the game
    return 0;
}
